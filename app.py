from matplotlib import pyplot as plt
from sklearn.discriminant_analysis import StandardScaler
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import pickle
import warnings
from datetime import datetime
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="üîí D√©tection Fraudes Bancaires",
    page_icon="üîí",
    layout="wide",
    initial_sidebar_state="expanded"
)
PREDICTION_DATA = {
    'transaction_info': {},
    'prediction_results': {},
    'has_prediction': False
}

genre_mapping = {
    'femelle': 0,
    'male': 1
}

region_mapping = {
    'Houston': 0.3950,
    'Orlando': 0.3168,
    'Miami': 0.2881,
}

type_carte_mapping = {
    'Mastercard': 0,
    'Visa': 1,
}

# CSS personnalis√© pour le th√®me bleu-vert-rouge
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: #e5e7eb;
    }
    
    .stApp {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
        color: #e5e7eb;
    }
    
    /* Default text color for all elements */
    .stApp, .stApp * {
        color: #e5e7eb !important;
    }
    
    /* Override for specific elements that should keep their colors */
    h1, h2, h3 {
        color: #3b82f6 !important;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    
    .metric-card {
        background: linear-gradient(145deg, rgba(59,130,246,0.1) 0%, rgba(37,99,235,0.1) 100%);
        padding: 20px;
        border-radius: 15px;
        border: 1px solid rgba(59,130,246,0.3);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        margin: 10px 0;
        
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(59,130,246,0.3);
        border-color: rgba(59,130,246,0.6);
    }
    
    .prediction-card {
        background: linear-gradient(145deg, rgba(59,130,246,0.15) 0%, rgba(37,99,235,0.15) 100%);
        padding: 25px;
        border-radius: 20px;
        border: 2px solid rgba(59,130,246,0.4);
        backdrop-filter: blur(15px);
        transition: all 0.4s ease;
        text-align: center;
    }
    
    .prediction-card:hover {
        transform: scale(1.02);
        box-shadow: 0 15px 35px rgba(59,130,246,0.4);
    }
    
    .form-card {
        background: linear-gradient(145deg, rgba(59,130,246,0.1) 0%, rgba(37,99,235,0.1) 100%);
        padding: 30px;
        border-radius: 20px;
        border: 1px solid rgba(59,130,246,0.3);
        backdrop-filter: blur(10px);
        margin: 20px 0;
        color: #e5e7eb !important;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, rgba(59,130,246,0.1) 0%, rgba(37,99,235,0.1) 100%);
    }
    
    .stSelectbox > div > div {
        background-color: rgba(59,130,246,0.1);
        border: 1px solid rgba(59,130,246,0.3);
        color: #e5e7eb !important;
    }
    
    
    .fraud-alert {
        background: linear-gradient(145deg, rgba(239,68,68,0.2) 0%, rgba(220,38,38,0.1) 100%);
        border: 2px solid #ef4444;
        border-radius: 15px;
        padding: 20px;
        animation: pulse 2s infinite;
        text-align: center;
        color: #fecaca !important;
    }
    
    .fraud-alert h2, .fraud-alert h3, .fraud-alert p {
        color: #fecaca !important;
    }
    
    .safe-alert {
        background: linear-gradient(145deg, rgba(34,197,94,0.2) 0%, rgba(22,163,74,0.1) 100%);
        border: 2px solid #22c55e;
        border-radius: 15px;
        padding: 20px;
        text-align: center;
        color: #bbf7d0 !important;
    }
    
    .safe-alert h2, .safe-alert h3, .safe-alert p {
        color: #bbf7d0 !important;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }
    
    .stButton > button {
        background: linear-gradient(45deg, #3b82f6 0%, #2563eb 100%);
        color: #e5e7eb !important;
        border: none;
        border-radius: 25px;
        padding: 10px 25px;
        font-weight: bold;
        transition: all 0.3s ease;
        width: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(59,130,246,0.4);
        color: #e5e7eb !important;
        font-weight: bold !important;
        background: linear-gradient(45deg, #2563eb 0%, #1d4ed8 100%) !important;
    }
    
    .stButton > button:focus {
        color: #e5e7eb !important;
        font-weight: bold !important;
        background: linear-gradient(45deg, #3b82f6 0%, #2563eb 100%) !important;
        box-shadow: 0 0 0 0.2rem rgba(59,130,246,0.25);
    }
    
    .stButton > button:active {
        color: #e5e7eb !important;
        font-weight: bold !important;
        background: linear-gradient(45deg, #3b82f6 0%, #2563eb 100%) !important;
    }
    
    .nav-button {
        background: linear-gradient(45deg, #3b82f6 0%, #2563eb 100%);
        color: #e5e7eb !important;
        padding: 10px 20px;
        border: none;
        border-radius: 25px;
        margin: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: bold;
    }
    
    .nav-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 15px rgba(59,130,246,0.3);
        color: #e5e7eb !important;
        font-weight: bold !important;
    }
    
    .nav-button.active {
        background: linear-gradient(45deg, #2563eb 0%, #1d4ed8 100%);
        box-shadow: 0 4px 10px rgba(59,130,246,0.5);
        color: #e5e7eb !important;
        font-weight: bold !important;
    }
    
    /* Dataframe styling */
    .stDataFrame {
        color: #e5e7eb !important;
    }
    
    /* Markdown text */
    .stMarkdown {
        color: #e5e7eb !important;
    }
    
    /* Labels */
    label {
        color: #e5e7eb !important;
    }
    
    /* Success elements */
    .success-text {
        color: #22c55e !important;
    }
    
    /* Warning elements */
    .warning-text {
        color: #f59e0b !important;
    }
    
    /* Error elements */
    .error-text {
        color: #ef4444 !important;
    }
    
    /* Download button styling */
    .stDownloadButton > button {
        background: linear-gradient(45deg, #22c55e 0%, #16a34a 100%);
        color: white !important;
        border: none;
        border-radius: 25px;
        padding: 10px 25px;
        font-weight: bold;
        transition: all 0.3s ease;
        width: 100%;
    }
    
    .stDownloadButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(34,197,94,0.4);
        background: linear-gradient(45deg, #16a34a 0%, #15803d 100%) !important;
    }
</style>
""", unsafe_allow_html=True)

def update_prediction_data(user_inputs, prediction, probability):
    """
    Update the global prediction data array
    """
    global PREDICTION_DATA
    
    PREDICTION_DATA['transaction_info'] = {
        'age': user_inputs['age'],
        'salaire': user_inputs['salaire'],
        'score_credit': user_inputs['score_credit'],
        'montant_transaction': user_inputs['montant_transaction'],
        'anciennete_compte': user_inputs['anciennete_compte'],
        'genre': user_inputs['genre'],
        'type_carte': user_inputs['type_carte'],
        'region': user_inputs['region']
    }
    
    PREDICTION_DATA['prediction_results'] = {
        'prediction': prediction,
        'probability': probability,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    PREDICTION_DATA['has_prediction'] = True

def get_prediction_data():
    """
    Retrieve prediction data from global array
    """
    global PREDICTION_DATA
    return PREDICTION_DATA

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    # Simuler des donn√©es si le fichier n'existe pas
    try:
        df = pd.read_csv('fraude_bancaire_synthetique_final.csv')
    except FileNotFoundError:
        # G√©n√©rer des donn√©es synth√©tiques pour la d√©monstration
        return
    return df
@st.cache_data
def load_data_clean():
    # Simuler des donn√©es si le fichier n'existe pas
    try:
        data_clean = pd.read_csv('data_clean.csv')
    except FileNotFoundError:
        # G√©n√©rer des donn√©es synth√©tiques pour la d√©monstration
        return
    return data_clean

# Fonction pour charger le mod√®le (simul√©)
@st.cache_resource
def load_model():
    # Simuler un mod√®le si le fichier n'existe pas
    try:
        with open('model.pkl', 'rb') as file:
            model = pickle.load(file)
    except FileNotFoundError:
       return
    return model

# Fonction pour g√©n√©rer un rapport PDF
def generate_pdf_report(transaction_data, prediction_result, probability):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # Style personnalis√©
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=colors.HexColor('#1e3a8a')
    )
    
    # Titre
    story.append(Paragraph("üîí RAPPORT D'ANALYSE DE FRAUDE BANCAIRE", title_style))
    story.append(Spacer(1, 12))
    
    # Informations g√©n√©rales
    story.append(Paragraph(f"<b>Date d'analyse:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", styles['Normal']))
    story.append(Paragraph(f"<b>ID Transaction:</b> TXN-{datetime.now().strftime('%Y%m%d%H%M%S')}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # R√©sultat de l'analyse
    if prediction_result == 1:
        story.append(Paragraph("<b>üö® R√âSULTAT: FRAUDE D√âTECT√âE</b>", 
                             ParagraphStyle('Alert', parent=styles['Normal'], 
                                          textColor=colors.red, fontSize=14, spaceAfter=12)))
        story.append(Paragraph(f"Probabilit√© de fraude: <b>{probability[1]:.1%}</b>", styles['Normal']))
        story.append(Paragraph("‚ö†Ô∏è Recommandation: V√©rification manuelle requise", styles['Normal']))
    else:
        story.append(Paragraph("<b>‚úÖ R√âSULTAT: TRANSACTION L√âGITIME</b>", 
                             ParagraphStyle('Safe', parent=styles['Normal'], 
                                          textColor=colors.green, fontSize=14, spaceAfter=12)))
        story.append(Paragraph(f"Probabilit√© de l√©gitimit√©: <b>{probability[0]:.1%}</b>", styles['Normal']))
        story.append(Paragraph("‚úÖ Recommandation: Transaction approuv√©e", styles['Normal']))
    
    story.append(Spacer(1, 20))
    
    # D√©tails de la transaction
    story.append(Paragraph("<b>D√âTAILS DE LA TRANSACTION</b>", styles['Heading2']))
    
    transaction_details = [
        ['Param√®tre', 'Valeur', '√âvaluation'],
        ['√Çge du client', f"{transaction_data['age']} ans", evaluate_age(transaction_data['age'])],
        ['Salaire annuel', f"{transaction_data['salaire']:,}‚Ç¨", evaluate_salary(transaction_data['salaire'])],
        ['Score de cr√©dit', str(transaction_data['score_credit']), evaluate_credit_score(transaction_data['score_credit'])],
        ['Montant transaction', f"{transaction_data['montant_transaction']:,.2f}‚Ç¨", evaluate_amount(transaction_data['montant_transaction'], transaction_data['salaire'])],
        ['Anciennet√© compte', f"{transaction_data['anciennete_compte']:.1f} ans", evaluate_account_age(transaction_data['anciennete_compte'])],
        ['Type de carte', transaction_data['type_carte'], "Standard"],
        ['R√©gion', transaction_data['region'], "Standard"],
        ['Genre', transaction_data['genre'], "Standard"],
    ]
    
    table = Table(transaction_details)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))
    story.append(table)
    story.append(Spacer(1, 20))
    
    # Analyse des facteurs de risque
    story.append(Paragraph("<b>ANALYSE DES FACTEURS DE RISQUE</b>", styles['Heading2']))
    risk_factors = analyze_risk_factors(transaction_data)
    for factor in risk_factors:
        story.append(Paragraph(f"‚Ä¢ {factor}", styles['Normal']))
    
    story.append(Spacer(1, 20))
    
    # Recommandations
    story.append(Paragraph("<b>RECOMMANDATIONS</b>", styles['Heading2']))
    recommendations = get_recommendations(transaction_data, prediction_result)
    for rec in recommendations:
        story.append(Paragraph(f"‚Ä¢ {rec}", styles['Normal']))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

# Fonctions d'√©valuation pour le rapport
def evaluate_age(age):
    if age < 25 or age > 70:
        return "‚ö†Ô∏è Risque √©lev√©"
    elif age < 30 or age > 65:
        return "‚ö° Risque mod√©r√©"
    else:
        return "‚úÖ Normal"

def evaluate_salary(salary):
    if salary < 25000:
        return "‚ö†Ô∏è Faible revenu"
    elif salary > 100000:
        return "üí∞ Revenu √©lev√©"
    else:
        return "‚úÖ Normal"

def evaluate_credit_score(score):
    if score < 500:
        return "üö® Tr√®s risqu√©"
    elif score < 650:
        return "‚ö†Ô∏è Risque mod√©r√©"
    else:
        return "‚úÖ Bon score"

def evaluate_amount(amount, salary):
    monthly_salary = salary / 12
    if amount > monthly_salary * 0.5:
        return "‚ö†Ô∏è Montant √©lev√©"
    elif amount > monthly_salary * 0.2:
        return "‚ö° Montant mod√©r√©"
    else:
        return "‚úÖ Normal"

def evaluate_account_age(age):
    if age < 1:
        return "‚ö†Ô∏è Compte r√©cent"
    elif age < 3:
        return "‚ö° Compte moyen"
    else:
        return "‚úÖ Compte √©tabli"

def analyze_risk_factors(data):
    factors = []
    
    if data['age'] < 25:
        factors.append("√Çge jeune - profil √† risque statistiquement plus √©lev√©")
    if data['score_credit'] < 600:
        factors.append("Score de cr√©dit faible - historique de cr√©dit probl√©matique")
    if data['montant_transaction'] > (data['salaire'] / 12) * 0.3:
        factors.append("Montant de transaction √©lev√© par rapport au revenu mensuel")
    if data['anciennete_compte'] < 2:
        factors.append("Compte r√©cent - moins d'historique pour validation")
    
    if not factors:
        factors.append("Aucun facteur de risque majeur identifi√©")
    
    return factors

def get_recommendations(data, prediction):
    recommendations = []
    
    if prediction == 1:
        recommendations.extend([
            "Suspendre temporairement la transaction",
            "Contacter le client pour v√©rification d'identit√©",
            "V√©rifier l'activit√© r√©cente du compte",
            "Analyser le pattern de d√©penses habituel",
            "Consid√©rer une authentification renforc√©e"
        ])
    else:
        recommendations.extend([
            "Autoriser la transaction",
            "Surveiller les transactions suivantes si montant inhabituel",
            "Mettre √† jour le profil de risque du client"
        ])
    
    return recommendations

# Fonction pour exporter les transactions frauduleuses
def export_fraudulent_transactions(df):
    fraudulent_df = df[df['fraude'] == 1].copy()
    
    # Ajouter des colonnes d'analyse
    fraudulent_df['date_detection'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    fraudulent_df['statut'] = 'FRAUDE_CONFIRM√âE'
    fraudulent_df['risque_montant'] = fraudulent_df.apply(
        lambda x: '√âLEV√â' if x['montant_transaction'] > (x['salaire']/12)*0.3 else 'MOD√âR√â', axis=1
    )
    
    # R√©organiser les colonnes
    columns_order = ['date_detection', 'statut', 'age', 'genre', 'salaire', 'score_credit', 
                    'montant_transaction', 'risque_montant', 'type_carte', 'region', 
                    'anciennete_compte', 'fraude']
    
    return fraudulent_df[columns_order]

# Navigation
def show_navigation():
    st.markdown("""
    <div style='text-align: center; padding: 20px;'>
        <h1 style='color: #e5e7eb'>üîí Syst√®me de D√©tection des Fraudes Bancaires üè¶</h1>
        <p style='font-size: 18px; color: #3b82f6;'>Intelligence Artificielle pour la S√©curit√© Financi√®re</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üè† Accueil", key="nav_accueil"):
            st.session_state.page = "accueil"
    
    with col2:
        if st.button("üìä Statistiques", key="nav_stats"):
            st.session_state.page = "statistiques"
    
    with col3:
        if st.button("üéØ Pr√©diction", key="nav_prediction"):
            st.session_state.page = "prediction"

# Page d'accueil
def show_accueil():
    st.markdown("<h2 style='color: #e5e7eb;'>üè† Bienvenue dans le Syst√®me de D√©tection des Fraudes</h2>", unsafe_allow_html=True)
    
    # Chargement des donn√©es pour les m√©triques
    df = load_data()
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class='metric-card'>
            <h3 style='color: #e5e7eb;'>üìä Total Transactions</h3>
            <h2 style='color: #e5e7eb;'>{len(df):,}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        fraud_count = df['fraude'].sum()
        st.markdown(f"""
        <div class='metric-card'>
            <h3 style='color: #e5e7eb;'>üö® Fraudes D√©tect√©es</h3>
            <h2 style='color: #ef4444;'>{int(fraud_count):,}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        fraud_rate = (fraud_count / len(df.dropna(subset=['fraude']))) * 100
        st.markdown(f"""
        <div class='metric-card'>
            <h3 style='color: #e5e7eb;'>üìà Taux de Fraude</h3>
            <h2 style='color: #ef4444;'>{fraud_rate:.1f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        avg_amount = df['montant_transaction'].mean()
        st.markdown(f"""
        <div class='metric-card'>
            <h3 style='color: #e5e7eb;'>üí∞ Montant Moyen</h3>
            <h2 style='color: #22c55e;'>{avg_amount:,.0f}‚Ç¨</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Description du syst√®me
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class='form-card'>
            <h3>üéØ Fonctionnalit√©s</h3>
            <ul>
                <li>üìä <strong>Analyse statistique</strong> compl√®te des donn√©es</li>
                <li>üîç <strong>Pr√©diction en temps r√©el</strong> des fraudes</li>
                <li>üìà <strong>Visualisations interactives</strong> des tendances</li>
                <li>ü§ñ <strong>Mod√®le Random Forest</strong> optimis√©</li>
                <li>‚ö° <strong>Interface intuitive</strong> et rapide</li>
                <li>üìÑ <strong>Rapports PDF d√©taill√©s</strong></li>
                <li>üìä <strong>Export des donn√©es frauduleuses</strong></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class='form-card'>
            <h3>üõ°Ô∏è S√©curit√© & Performance</h3>
            <ul>
                <li>üîí <strong>D√©tection avanc√©e</strong> des patterns suspects</li>
                <li>‚ö° <strong>Pr√©dictions instantan√©es</strong> en moins d'1 seconde</li>
                <li>üìä <strong>Pr√©cision √©lev√©e</strong> du mod√®le d'IA</li>
                <li>üéØ <strong>R√©duction des faux positifs</strong></li>
                <li>üìà <strong>Am√©lioration continue</strong> des performances</li>
                <li>üìã <strong>Tra√ßabilit√© compl√®te</strong> des analyses</li>
                <li>üîç <strong>Analyse approfondie</strong> des facteurs de risque</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# Page statistiques
def show_statistiques():
    st.markdown("<h2 style='color: #e5e7eb;'> üìä Analyse Statistique des Donn√©es </h2>", unsafe_allow_html=True)
    
    df = load_data()
    
    # Bouton d'export des transactions frauduleuses
    st.markdown("### üì• Export des Donn√©es")
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("üìã Exporter Fraudes (CSV)", key="export_csv"):
            fraudulent_df = export_fraudulent_transactions(df)
            csv = fraudulent_df.to_csv(index=False)
            st.download_button(
                label="üíæ T√©l√©charger CSV",
                data=csv,
                file_name=f"fraudes_detectees_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("üìä Exporter Fraudes (Excel)", key="export_excel"):
            fraudulent_df = export_fraudulent_transactions(df)
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                fraudulent_df.to_excel(writer, sheet_name='Fraudes_Detectees', index=False)
                
                # Ajouter une feuille de statistiques
                stats_df = pd.DataFrame({
                    'M√©trique': ['Total Fraudes', 'Montant Moyen Fraude', 'R√©gion la Plus Touch√©e', 
                               'Type Carte le Plus Touch√©', '√Çge Moyen Fraudeur'],
                    'Valeur': [
                        len(fraudulent_df),
                        f"{fraudulent_df['montant_transaction'].mean():,.2f}‚Ç¨",
                        fraudulent_df['region'].mode().iloc[0] if len(fraudulent_df) > 0 else 'N/A',
                        fraudulent_df['type_carte'].mode().iloc[0] if len(fraudulent_df) > 0 else 'N/A',
                        f"{fraudulent_df['age'].mean():.1f} ans" if len(fraudulent_df) > 0 else 'N/A'
                    ]
                })
                stats_df.to_excel(writer, sheet_name='Statistiques', index=False)
            
            processed_data = output.getvalue()
            st.download_button(
                label="üíæ T√©l√©charger Excel",
                data=processed_data,
                file_name=f"rapport_fraudes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    
    with col3:
        st.info(f"üîç {df['fraude'].sum()} transactions frauduleuses d√©tect√©es sur {len(df)} transactions totales")
    
    st.markdown("---")
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("<h3 style='color: #e5e7eb;'> üìä Distribution des Fraudes par R√©gion </h3>", unsafe_allow_html=True)
        fraud_by_region = df.groupby('region')['fraude'].agg(['count', 'sum']).reset_index()
        fraud_by_region['taux'] = (fraud_by_region['sum'] / fraud_by_region['count']) * 100
        
        fig = px.bar(fraud_by_region, x='region', y='taux',
                    color='taux', color_continuous_scale=['#22c55e', '#f59e0b', '#ef4444'],
                    title="Taux de Fraude par R√©gion (%)")
        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font_color='white',
            title_font=dict(color='white'),
            legend=dict(font=dict(color='white'))
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("<h3 style='color: #e5e7eb;'> üí≥ Fraudes par Type de Carte </h3>", unsafe_allow_html=True)
        fraud_by_card = df.groupby('type_carte')['fraude'].agg(['count', 'sum']).reset_index()
        
        fig = px.pie(fraud_by_card, values='sum', names='type_carte',
                    color_discrete_sequence=['#ef4444', '#f59e0b', '#3b82f6'],
                    title="R√©partition des Fraudes par Type de Carte")
        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font_color='white',
            title_font=dict(color='white'),
            legend=dict(font=dict(color='white'))
        )
        st.plotly_chart(fig, use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("<h3 style='color: #e5e7eb;'> üéØ Score de Cr√©dit vs Fraudes </h3>", unsafe_allow_html=True)
        df_clean = df.dropna()
        fig = px.box(df_clean, x='fraude', y='score_credit',
                    color='fraude', color_discrete_map={0: '#22c55e', 1: '#ef4444'},
                    title="Distribution du Score de Cr√©dit par Statut de Fraude")
        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font_color='white',
            title_font=dict(color='white'),
            legend=dict(font=dict(color='white'))
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("### üí∞ Montant vs √Çge (Fraudes)")
        fraud_data = df_clean[df_clean['fraude'] == 1]
        safe_data = df_clean[df_clean['fraude'] == 0].sample(n=min(200, len(fraud_data)))
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=safe_data['age'], y=safe_data['montant_transaction'],
            mode='markers', name='Transactions S√ªres',
            marker=dict(color='#22c55e', opacity=0.6)
        ))
        fig.add_trace(go.Scatter(
            x=fraud_data['age'], y=fraud_data['montant_transaction'],
            mode='markers', name='Fraudes',
            marker=dict(color='#ef4444', size=8)
        ))
        fig.update_layout(
            title="Montant des Transactions par √Çge",
            xaxis_title="√Çge",
            yaxis_title="Montant (‚Ç¨)",
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font_color='white',
            title_font=dict(color='white'),
            legend=dict(font=dict(color='white'))
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Statistiques d√©taill√©es
    st.markdown("### üìà Statistiques D√©taill√©es")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Variables Num√©riques")
        numeric_stats = df[['age', 'salaire', 'score_credit', 'montant_transaction', 'anciennete_compte']].describe()
        st.dataframe(numeric_stats.round(2))
    
    with col2:
        st.markdown("#### Variables Cat√©gorielles")
        st.write("**Type de Carte:**")
        st.write(df['type_carte'].value_counts())
        st.write("**R√©gion:**")
        st.write(df['region'].value_counts())
        st.write("**Genre:**")
        st.write(df['genre'].value_counts())

# Page pr√©diction
def show_prediction():
    df = load_data()
    data_clean = load_data_clean()
    st.markdown("## üéØ Pr√©diction de Fraude")
    
    # Formulaire de pr√©diction (sans st.form)
    st.markdown("### üìù Informations de la Transaction")
        
    col1, col2 = st.columns(2)
        
    with col1:
        st.markdown("#### Informations Personnelles")
        age = st.slider("√Çge", min_value=0, max_value=60, value=30, step=1)
        salaire = st.slider("Salaire annuel (‚Ç¨)", min_value=0, max_value=5000000, value=1000, step=100000)
        genre_options = df['genre'].dropna().unique().tolist()
        genre = st.selectbox("Genre", genre_options)
        anciennete = st.slider("Anciennet√© du compte (ann√©es)", min_value=0.0, max_value=50.0, value=5.0, step=0.1)
        
    with col2:
        st.markdown("#### Informations Transaction")
        score_credit = st.slider("Score de cr√©dit", min_value=0, max_value=850, value=650)
        montant = st.slider("Montant de la transaction (‚Ç¨)", min_value=0.0, max_value=5000000.0, value=1000.0, step=100000.0)
        type_carte_options = df['type_carte'].dropna().unique().tolist()
        type_carte = st.selectbox("Type de carte", type_carte_options)
        region_options = df['region'].dropna().unique().tolist()
        region = st.selectbox("R√©gion", region_options)
        
    submitted = st.button("üîç Analyser la Transaction")
        
    if submitted:
        # Chargement du mod√®le
        try:
            model = load_model()
            
            # Pr√©paration des donn√©es pour le mod√®le (avec encodage)
            input_data = pd.DataFrame({
                'age': [age],
                'salaire': [salaire],
                'score_credit': [score_credit],
                'montant_transaction': [montant],
                'anciennete_compte': [anciennete],
                'type_carte': [type_carte_mapping.get(type_carte, 0)],
                'region': [region_mapping.get(region, 1)],
                'genre': [genre_mapping.get(genre, 0)],
                
                
            })
            st.table(input_data)
            # standardisons input_data
            scaler = StandardScaler()
            data_clean = data_clean.drop(['fraude'], axis=1)
            scaler.fit_transform(data_clean)
            input_data_scaled = scaler.transform(input_data)
            
            # Pr√©diction
            prediction = model.predict(input_data_scaled)[0]
            probability = model.predict_proba(input_data_scaled)[0]

            
            # *** CORRECTION: Passer les valeurs originales de l'utilisateur ***
            user_inputs = {
                'age': age,
                'salaire': salaire,
                'score_credit': score_credit,
                'montant_transaction': montant,
                'anciennete_compte': anciennete,
                'genre': genre,
                'type_carte': type_carte,
                'region': region
            }
                        
            # Mettre √† jour le tableau global avec les valeurs originales
            update_prediction_data(user_inputs, prediction, probability)
            
            st.markdown("---")
            st.markdown("### üîç R√©sultats de l'Analyse")
            
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                if prediction == 1:
                    st.markdown(f"""
                    <div class='fraud-alert'>
                        <h2>‚ö†Ô∏è FRAUDE D√âTECT√âE</h2>
                        <h3>Probabilit√© de fraude: {probability[1]:.1%}</h3>
                        <p>üö® Cette transaction pr√©sente des caract√©ristiques suspectes</p>
                        <p>‚ö° Recommandation: V√©rification manuelle requise</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div class='safe-alert'>
                        <h2>‚úÖ TRANSACTION S√õRE</h2>
                        <h3>Probabilit√© de l√©gitimit√©: {probability[0]:.1%}</h3>
                        <p>üí≥ Cette transaction semble l√©gitime</p>
                        <p>‚úÖ Recommandation: Transaction approuv√©e</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # *** NOUVEAU: Graphique des probabilit√©s ***
            st.markdown("### üìä Visualisation des Probabilit√©s")
            
            # Cr√©ation des donn√©es pour le graphique
            prob_data = pd.DataFrame({
                'Classe': ['L√©gitime', 'Frauduleuse'],
                'Probabilit√©': [probability[0], probability[1]],
                'Couleur': ['#28a745' if probability[0] > probability[1] else '#6c757d', 
                           '#dc3545' if probability[1] > probability[0] else '#6c757d']
            })
            
            # Cr√©ation du graphique avec matplotlib
            fig, ax = plt.subplots(figsize=(8, 4))
            bars = ax.bar(prob_data['Classe'], prob_data['Probabilit√©'], 
                        color=prob_data['Couleur'], alpha=0.8, edgecolor='black', linewidth=1.5)

            # Personnalisation du graphique
            ax.set_ylabel('Probabilit√©', fontsize=12, fontweight='bold')
            ax.set_xlabel('Type de Transaction', fontsize=12, fontweight='bold')
            ax.set_title('Probabilit√©s de Pr√©diction par Classe', fontsize=14, fontweight='bold', pad=15)
            ax.set_ylim(0, 1)

            # Ajout des valeurs sur les barres
            for i, (bar, prob) in enumerate(zip(bars, prob_data['Probabilit√©'])):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{prob:.1%}', ha='center', va='bottom', 
                    fontsize=11, fontweight='bold')

            # Ajout d'une ligne de r√©f√©rence √† 50%
            ax.axhline(y=0.5, color='gray', linestyle='--', alpha=0.7, linewidth=2)
            ax.text(0.5, 0.52, 'Seuil de d√©cision (50%)', ha='center', va='bottom', 
                transform=ax.transData, fontsize=9, style='italic')

            # Am√©lioration de l'apparence
            ax.grid(axis='y', alpha=0.3, linestyle='-', linewidth=0.5)
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['left'].set_linewidth(0.5)
            ax.spines['bottom'].set_linewidth(0.5)

            # Affichage du graphique dans Streamlit
            st.pyplot(fig)
            plt.close()  # Lib√©rer la m√©moire

            # Alternative avec Plotly (plus interactif)
            st.markdown("#### üìà Graphique Interactif")
            fig_plotly = px.bar(
                prob_data, 
                x='Classe', 
                y='Probabilit√©',
                color='Classe',
                color_discrete_map={'L√©gitime': '#28a745', 'Frauduleuse': '#dc3545'},
                title="Probabilit√©s de Pr√©diction - Vue Interactive",
                text='Probabilit√©'
            )

            # Personnalisation du graphique Plotly
            fig_plotly.update_traces(
                texttemplate='%{text:.1%}', 
                textposition='outside',
                textfont_size=12
            )
            fig_plotly.update_layout(
                yaxis_title="Probabilit√©",
                xaxis_title="Type de Transaction",
                showlegend=False,
                height=350,
                yaxis=dict(range=[0, 1.1]),
                title_font_size=14
            )

            # Ligne de r√©f√©rence √† 50%
            fig_plotly.add_hline(y=0.5, line_dash="dash", line_color="gray", 
                            annotation_text="Seuil de d√©cision (50%)")

            st.plotly_chart(fig_plotly, use_container_width=True)
            # D√©tails de l'analyse
            st.markdown("### üìä D√©tails de l'Analyse")
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### Donn√©es Saisies")
                st.write(f"**√Çge:** {age} ans")
                st.write(f"**Salaire:** {salaire:,}‚Ç¨")
                st.write(f"**Score cr√©dit:** {score_credit}")
                st.write(f"**Genre:** {genre}")
            
            with col2:
                st.write(f"**Montant:** {montant:,}‚Ç¨")
                st.write(f"**Type carte:** {type_carte}")
                st.write(f"**R√©gion:** {region}")
                st.write(f"**Anciennet√©:** {anciennete} ans")
                
        except Exception as e:
            st.error(f"Erreur lors du chargement du mod√®le: {str(e)}")
            st.info("Assurez-vous que le fichier 'model.pkl' est pr√©sent dans le r√©pertoire.")

    # Section PDF - Maintenant en dehors du bloc if submitted
    global PREDICTION_DATA
    if PREDICTION_DATA['has_prediction']:
        st.markdown("---")
        st.markdown("### üìÑ G√©n√©ration de Rapport")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # *** RETRIEVE DATA FROM GLOBAL ARRAY ***
            data = get_prediction_data()
            transaction_data = data['transaction_info']
            prediction_results = data['prediction_results']
                
            try:
                # Pass data from global array to PDF function
                pdf_buffer = generate_pdf_report(
                    transaction_data, 
                    prediction_results['prediction'], 
                    prediction_results['probability']
                )
                    
                st.download_button(
                    label="üíæ T√©l√©charger Rapport PDF",
                    data=pdf_buffer,
                    file_name=f"rapport_analyse_fraude_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf"
                )
                                    
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration du PDF: {str(e)}")
                st.write(f"Debug - Erreur d√©taill√©e: {str(e)}")
        
        with col2:
            st.info("""
            üìã **Le rapport PDF contient:**
            - R√©sultat d√©taill√© de l'analyse
            - √âvaluation de chaque param√®tre
            - Analyse des facteurs de risque
            - Recommandations personnalis√©es
            - Tra√ßabilit√© compl√®te
            """)   
def main():
    # Initialiser la session state
    if 'page' not in st.session_state:
        st.session_state.page = 'accueil'
    
    # Navigation
    show_navigation()
    
    st.markdown("---")
    
    # Afficher la page correspondante
    if st.session_state.page == 'accueil':
        show_accueil()
    elif st.session_state.page == 'statistiques':
        show_statistiques()
    elif st.session_state.page == 'prediction':
        show_prediction()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; padding: 20px; color: #3b82f6;'>
        <p>üîí Syst√®me de D√©tection des Fraudes Bancaires - Powered by Random Forest & Streamlit</p>
        <p>‚ö° Mod√®le pr√©-entra√Æn√© optimis√© pour une d√©tection pr√©cise et rapide</p>
        <p>üìÑ Rapports PDF d√©taill√©s ‚Ä¢ üìä Export Excel/CSV ‚Ä¢ üîç Analyse approfondie</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
